Intro: Serendipity is an AI chatbot and digital-assistant app in Python using Gradio and Flask
Goal: A modular, user-friendly, and well-coded gradio/flask website app showcasing impeccable organization and elegant programming skills.
Repo: https://github.com/silasfelinus/serendipity/tree/main
Language: Python 3.8
Interface: Gradio
Custom html/css/js: Flask
Integrations: OpenAI
Testing: pytest
Logging: logger
CI: Github Actions
Directory:
./
    .env.example
    requirements.txt
    prompts.yaml
    all_code.md
    directory_tree.txt
    environment.yml
    chatgpt_intro_prompt.txt
    config.yaml
    functions_and_classes.md
    trawler.py
    .env
    launch.sh
    .gitignore
    venv/
    docs/
        roadmap.txt
        README.md
        textdumps/
            2022
            serendipity_history.txt
            silas_quests
            quests.yaml
            openai.txt
    .git/

        hooks/
        logs/
        info/
    app/
        logging_config.py
        main.py
        __init__.py
        interface/
            gradio.py
            __init__.py
        templates/
            index.html
        static/
            styles.css
        test/
            test_main.py
            __init__.py
        chatbot/
            conversation.py
            chatbot.py
            response.py
            __init__.py
            prompt_builder.py
        livechat/
            livechat.py
            events.py
            routes.py
            __init__.py
        routes/
            routes.py
            __init__.py

Instructions:
Focus on readability, simplicity, and consistent naming conventions. 
Write modular and reusable functions or classes. 
Adhere to Python best practices and coding standards. 
Ensure proper error handling and use meaningful error messages. 
Provide well-commented code and maintain documentation-ready styling. 
Assume the latest code version is in use, and check for bugs and errors.
Adhere to Python's PEP 8 style guide.
Consistent naming conventions for variables, functions, and classes.
Proper error handling and meaningful error messages.
DRY (Don't Repeat Yourself) principles for writing modular and reusable code.
Adequate documentation through docstrings and inline comments.

Start sample code with commented filepath and single line summary
#[filepath]
#[Summary]

E.G.: 
#./trawler.py
#Utility script for reading functions and comments from a codebase.

Last Goals: Directory Structure, Logging, CI, pytest
Permanent Goals: Code Review, optimized for clarity, consistency, and elegance.  
Next Goals: Livechat, Website formatting, Database Intgration, User Login

Project: Livechat
Minimum viable product: a livechat window on the website that will accept and display text inputs. (I have a nodejs livechat project we can start from, or recreate code for this project)
Full concept: User login portal, chatroom selection, internet connected, conversations and user logins are stored in a database (mongo or mariadb)

With that setup and my goal of making a functional livechat window on the website, can you give me an outline of steps we can go through to meet this goal today?
