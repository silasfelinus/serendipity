Web Project Blueprint: Widget Webapp Wonderforge

Objective: Develop a user-centric project portal for creating, viewing, and chaining AI API webapps using Python 3.8, Flask, and Gradio. Enable individuals to transform ideas into marketable webapps with ease.

Collaborators: Silas Knight & ChatGPT

Current Status: Backend infrastructure built with modularity and consistent coding practices. Python 3.8, Flask, pytest, logging, and GitHub Actions CI testing implemented. Creative prompts, branding, and development tools in progress. Concept art available. Self-hosted MongoDB pending integration.

GitHub: https://github.com/silasfelinus/serendipity/tree/main

Project Scope: Create a seamless, single-page website experience with a minimalist, customizable interface. Design an interactive playground for API web services, featuring drag-and-drop functionality, API chaining, and themed avatars. Integrate social features such as user logins, live chat, and adaptable chatroom widgets. Simplify complex concepts with an intuitive, engaging interface resembling a digital board game.

a. Core Features:

User registration and login
Database access and integration
Backend and frontend systems for seamless API chaining
Customizable layout and design (optional header, footer, sidebar; 3x3 grid as base layout)
"Widget" app for personalized displays
Versatile chat interface, including API calls and OpenAI chat
Secure user input for OpenAI keys
Well-documented, user-friendly interface for easy modding
Board game-inspired aesthetics (e.g., Ticket to Ride, Robo Rally)

Important files:
./.github/workflows/venv.yaml
./app/interface/gradio.py (today's focus, currently blank)
./app/static/script.js
./app/static/styles.css
./app/templates/index.html
./app/templates/api.html
./app/logging_config.py
./app/main.py
./prompts (exclusive collection of text files destined for API web services)
./tests
./venv
./.env
./.env.example
./.gitignore
./environment.yaml
./launcher.sh
./requirements.txt
./run.py


Milestones Completed:
Revamped project through successful pytests and Github Actions Continuous Integration testing.
Considerable progress in planning and design.

Pending Milestones:
Integrate Gradio into tests and confirm working instance
Develop a captivating "Work in Progress" page
Connect and integrate database
Configure HTML, CSS, and JavaScript for basic portal
Launch the first webapp
Implement user logins

Current Project:
Reintegrate Gradio



