Web Project Outline: WonderWidgets Unleashed

Objective: Develop a user-friendly portal that enables users to create, view, and chain AI API web apps as customizable WonderWidgets, leveraging Python 3.8, Flask, and Gradio.

Vision: Empower individuals with great ideas to transform their pitches into marketable web apps with a single click.

Current Status:

Backend infrastructure built from scratch with a focus on modularity and consistent coding practices.
GitHub: https://github.com/silasfelinus/serendipity/tree/main
Python 3.8, Flask, pytest, logging, and GitHub Actions CI testing are set up.
A plethora of crafted prompts are ready to be transformed into WonderWidgets.
Plans are in place for converting Hugging Face repos and CiviTAI links into WonderWidgets.
Branding and development tools are in progress, with concept art available.
Self-hosted MongoDB is set up, pending integration.
Project Scope:

An engaging single-page website experience for end-users with a simplified interface, featuring themed rectangular WonderWidgets.
Emphasis on modularity, offering a playful API-web service environment with a drag-and-drop interface and exciting JavaScript code for connecting APIs.
Customizable themed avatars accompany themed presets.
Incorporate social elements, including user logins, live chat functionality, and a framework for customizable WonderWidgets.
Ultimate Goal: Develop a one-page portal that simplifies complex concepts through an intuitive, friendly interface, encouraging users to play, build, and share their ideas as WonderWidgets.

Interface Inspiration: Board games (e.g., Ticket to Ride or Robo Rally)

Core Features:

Live chat functionality
Drag-and-drop WonderWidget-based interface
User registration and login
Stylishly formatted database CRUD access
Backend and frontend API chaining system
Flexible design (optional header, footer, sidebar; 3x3 grid or graph-based layout)
Customizable WonderWidget screens
Public WonderWidgets repository
Integration with Hugging Face and CiviTAI
Smart text processor for widget conversion
Versatile chat interface, including API calls and OpenAI chat
Secure and convenient user input for OpenAI keys
Well-documented, intuitive interface for easy modding
Modern board game feel with a friendly interface
Support for WonderWidget web themes (5 interchangeable CSS designs)
Scheduled WonderWidgets
Integration with Rocket.Chat
Primary Apps:

WonderWidgets Lab: Default experience featuring a 3x3 grid for building, editing, and sharing WonderWidgets.
WonderChat: Multi-room live chat interface, with each app having its own WonderChat room.
WonderGallery: Visual library of art generated using WonderWidgets.
WonderLibrary: Handles recording and retrieval of data from the database, including text data sent to and from WonderWidgets.
WonderApps: A web gallery of publicly shared WonderWidgets.
Sample WonderWidgets:

Text Prompt: User text input sent to a Hugging Face repo.
Image Analyzer: JPG file sent to a CLIP interrogator, then to ChatGPT3.5 along with custom text.
Creative Workflow: User text input sent to Writer AI, Critic AI, Processor, and Art AI WonderWidgets, followed by MessengerWonderWidget for media launch, all through a one-button pipeline.


Milestones Completed:
Rebuilt project through completed pytests and Github Actions Continuous Integration testing.
significant work on planning and design.


Pending Milestones:
add gradio instance to tests and confirm working instance
make simple WOW page for under construction
connect and add to database
configure html css javascript for basic  portal
livechat active
launch our first webapp
user logins
Demo WonderWidget Project #1: Serendipity, The Adventure-Game-Slash-Task-Manager

Demo Wonderproject #2: PromptWidgets Suite: A collection of Widgets based around text prompts to ChatGPT3

Demo Wonderproject #3: Art Academy Showdown: up to 4-players (or AI Widgetbots) compete to write the best prompt. Cards Against Humanity meets Jackbox.
